
semicolon-expression:
  funcall-expression; semicolon-expression
  funcall-expression

funcall-expression:
  funcall-expression arrow-expression
  funcall-expression :quoted-identifier arrow-expression
  arrow-expression

arrow-expression:
  primary-expression => funcall-expression
  primary-expression -> funcall-expression
  primary-expression , funcall-expression
  primary-expression

primary-expression:
  [ semicolon-expression ]
  { semicolon-expression }
  ( semicolon-expression )
  exclam-expression
  identifier
  constant

exclam-expression:
  !if primary-expression primary-expression
  !lambda identifier primary-expression
  !define identifier primary-expression
  !funcall primary-expression primary-expression
  !print primary-expression
  !cons primary-expression primary-expression
  !car primary-expression
  !cdr primary-expression
  !do primary-expression primary-expression

identifier:

  symbol
  ' quoted-identifier

quoted-identifier:

  non-space-characters



  開始に使える文字 (0-9 は使えない):

    /[a-zA-Z]_/

  含む事のできる文字 (シンボルをハイフンで終了する事はできない): 

    /[a-zA-Z0-9]_-/

  終了に使える文字:

    /[a-zA-Z0-9]_/

たとえばこれは valid:

* hoge-fuga
* hoge_fuga
* _hoge
* hoge_
* _

これは invalid:

* hoge-
* -fuga
* -

また、 ' id の形式で書く事で空白以外のどんな文字でも id にできる。

* ' '
* ' !
* ' :

' と id の間には空白はあってもなくてもよい。



constant:

  数字 / 文字列
