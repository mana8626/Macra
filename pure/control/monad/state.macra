#[ a; b : *        -> *   -> *   = !do a b ]
#[ (a)  : *        -> *          = a ]
#[ {a}  : function -> *          = a ]
#[ [a]  : list     -> *          = a ]

----------------------------------------
  Standard IO
----------------------------------------
#[ puts a : * -> * = !print a ]

----------------------------------------
  Logical Expressions
----------------------------------------
#[ not a   : * -> *      = !if a nil 0   ]
#[ and a b : * -> * -> * = !if a b   nil ]
#[ or  a b : * -> * -> * = !if a 0   b   ]

----------------------------------------
  Conditional Expressions
----------------------------------------
#[ if a b c : * -> * -> * = !if a b c ]

----------------------------------------
  Function Expressions
----------------------------------------
#[ def id fn : symbol -> function -> *        = !define id fn ]
#[ a => b    : symbol -> *        -> function = !lambda a b   ]
#[ a, b      : symbol -> function -> function = !lambda a b   ]

----------------------------------------
  List Expressions
----------------------------------------
#[ car xs     : * -> *            = !car xs    ]
#[ cdr xs     : * -> *            = !cdr xs    ]
#[ x :cons xs : * -> *    -> list = !cons x xs ]
#[ a, b       : * -> list -> list = !cons a b  ]
#[ a; b       : * -> list -> list = !cons a b  ]


def 'Control.Monad.State.unit a =>
  { s => [a, s, nil] };

def 'Control.Monad.State.bind m, k =>
  { s =>
    ( !define result (m s)
    ; !define a !car result
    ; !define s2 !car !cdr result
    ; (k a) s2
    )
  };

#include control/monad
#[ eval-state initialVal monad : * -> Monad -> *
     = !lambda unit !lambda bind
             (bind (unit initialVal) monad nil)
           'Control.Monad.State.bind
         'Control.Monad.State.unit ]

--------------------------------------------------
こう置換されるはず。。。
!define bind 'Control.Monad.State.bind ;
!define unit 'Control.Monad.State.unit ;
!define initialVal 1;


!print ((bind (unit initialVal)
      (!lambda a (bind (unit a)
                       (!lambda a (bind (bind (unit a)
	                                      (!lambda id (!print id; unit 2)))
		                        (!lambda id (!print id; unit 3))))))
      nil))
--------------------------------------------------

!print ( eval-state 1
         { a => (!print a; 2)
         ; a => (!print a; 3)
         } )